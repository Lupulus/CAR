package Main;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class FtpRequest {
	
	String tab[];
	boolean getName = false, connected = false;
	boolean passive;
	BufferedReader in;
	PrintWriter out;
	File repertoire;
	
	public FtpRequest(Socket s) {
		repertoire = new File(".");
		try{
			this.in =  new BufferedReader( new InputStreamReader(s.getInputStream()));
			this.out = new PrintWriter(s.getOutputStream());
		}catch(Exception e){
			
		}
		
	}
	
	public void processRequest(){
		
			try {
				send(220, "connection");
				while(true){
				    String temp = in.readLine();
				    this.tab = temp.split(" ");
			    		    	
					if(connected){
						switch(tab[0].toUpperCase()){
							case "USER" : 
							case "PASS" : send(2, "Erreur déjà connecté");
							              break;
							case "PAVD" : this.processPAVD();
							              break;
							case "PORT" : this.processPORT();
							              break;
							case "RETR" : this.processRETR();
							              break;
							case "LIST" : this.processLIST();
							              break;
							case "STOR" : this.processSTOR();
							              break;
							case "QUIT" : this.processQUIT();
							              break;
							default     : //renvoyer une erreur
						}
					}else{
						switch(tab[0].toUpperCase()){
							case "USER" : this.processUSER(tab[1]); 
										  break;
							case "PASS" : this.processPASS(tab[1]);
							              break;
							case "PAVD" : 
							case "PORT" : 
							case "RETR" : 
							case "LIST" : 
							case "STOR" : 
							case "QUIT" : send(1, "Erreur Non connecté");
							              break;
							default     : //renvoyer une erreur
						}
					}
			}
	    } catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
		}
	}

	public void send(int number, String text){
		out.println(number + " " + text + "\r");
		out.flush();
	}
	
	public void processUSER(String name){
		if(name.equals("laval")){
			this.send(331, "Please specify password");
			getName = true;
		}else{
			//envoyer erreur
		}
	}
	
	public void processPASS(String pass){
		if(getName){
			if(pass.equals("pass") ){
				send(230, "Login succesful");
				getName = false;
				connected = true;
			}else{
				send(000, "Mot de passe incorrect");
			}
		}else{
			send(000, "Erreur: utilisateur non renseigné");
		}
	}
	
	public void processPAVD(){
		Thread t = new Thread(){
			public void runnable(){
				return;
				//DataSocket ds = attendreCX();
			};
		};
		send(227, "");
		passive = true;
	}
	
	public void processPORT(){
		passive = false;
	}
	
	public void processRETR(){
		
	}
	
	public void processSTOR(){
		File currentDir = new File(System.getProperty("user.dir"));
		String[] files = currentDir.list();
		for(int i = 0; i<files.length; i++){
			out.println(files[i]);
			out.flush();
		}
	}
	
	public void processLIST(){
		String [] listefichiers;

		int i;
		listefichiers=repertoire.list();
		for(i=0;i<listefichiers.length;i++){
		if(listefichiers[i].endsWith(".java")==true){
		
			System.out.println(listefichiers[i].substring(0,listefichiers[i].length()-5));
			}
		}
	}
	
	public void processQUIT(){

	}
}
